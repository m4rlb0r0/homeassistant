substitutions:
  devicename: "gosund_sp111_1"
  upper_devicename: "Gosund 1"
  # Higher value gives lower watt readout
  current_res: "0.00280"
  # Lower value gives lower voltage readout
  voltage_div: "775"

esphome:
  name: $devicename
  platform: ESP8266
  arduino_version: 2.5.1
  board: esp8285

# Enable logging
logger:
  baud_rate: 0

# Enable Home Assistant API
api:

# Enable over the air updates
ota:

wifi:
  ssid: "wHome"
  password: "pegaz123"
  fast_connect: on
  
  # Optional manual IP
  manual_ip:
    static_ip: 192.168.1.106
    gateway: 192.168.1.1
    subnet: 255.255.255.0

# see: https://esphome.io/components/time.html
time:
  - platform: homeassistant
    id: homeassistant_time

# Enable Web server
web_server:
  port: 80
  
sensor:
  # Power sensor
  - platform: hlw8012
    voltage_divider: 771
#    current_resistor: 0.001
    current_resistor: 0.0012
    sel_pin:
      number: GPIO12
      inverted: true
    cf_pin: GPIO05
    cf1_pin: GPIO04
    change_mode_every: 3
    update_interval: 5s
    # Current sensor
    current:
      name: "${devicename} - Amper"
      unit_of_measurement: A
      accuracy_decimals: 3
    # Voltage sensor
    voltage:
      name: "${devicename} - Volt"
      unit_of_measurement: V
      accuracy_decimals: 1
    # Power sensor
    power:
      id: power
      name: "${devicename} - Power"
      unit_of_measurement: W
      accuracy_decimals: 0
      filters:
      - multiply: 0.5
  
  - platform: wifi_signal
    name: "${devicename} - Wifi Signal"
    update_interval: 60s
    icon: mdi:wifi

  - platform: uptime
    name: "${devicename} - Uptime"
    update_interval: 60s
    icon: mdi:clock-outline

  - platform: total_daily_energy
    name: "${devicename} - Todays Usage"
    power_id: "power"
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    unit_of_measurement: kWh
    icon: mdi:calendar-clock

text_sensor:
  - platform: version
    name: "${devicename} - Version"
    icon: mdi:cube-outline

binary_sensor:
  # Binary sensor for the button press
  - platform: gpio
    name: "${devicename} - Button"
    pin:
      number: GPIO13
      inverted: true
    on_press:
      - switch.toggle: relay
      
  - platform: status
    name: "${devicename} - Status"
    device_class: connectivity
    
switch:
  # Switch to toggle the relay
  - platform: gpio
    id: relay
    name: relay
    pin: GPIO15
    on_turn_on:
      - light.turn_on: led
    on_turn_off:
      - light.turn_off: led

output:
  # Relay state led
  - platform: esp8266_pwm
    id: state_led
    pin:
      number: GPIO2
      inverted: true

light:
  # Relay state light
  - platform: monochromatic
    output: state_led
    id: led

# Uses the red LED as a ESPhome status indicator
status_led:
  pin:
    number: GPIO0
